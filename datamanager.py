import torchimport pandas as pdimport numpy as npclass DataManager:    def __init__(self, df, dtypes):        self.df = df        self.domain = dict()        self.dtype = {k: dtypes[k] for k in dtypes}        for column in df:            if column not in self.dtype:                self.dtype[column] = 'numeric' # by default                if self.df[column].dtype == 'int64':                    dom = sorted(set(self.df[column].values))                    #if len(dom) < 100:                    #    self.dtype[column] = 'categorical'            if self.dtype[column] == 'categorical':                dom = sorted(set(self.df[column].values))                self.domain[column] = dom                                def select_response(self, column):        assert self.dtype[column] == 'categorical'        value_lookup = {v: i for (i, v) in enumerate(self.domain[column])}        return torch.LongTensor([value_lookup[v] for                                  v in self.df[column]]), len(self.domain[column])            def select(self, columns):        tensors = [self.select_single(column).float() for column in columns]        return torch.cat(tensors, dim=1)                def select_single(self, column):        raw = self.df[column]        if self.dtype[column] == 'categorical':            result = self.onehot_matrix(raw.values, self.domain[column])        else:            # otherwise normalize the continuous vectors            from sklearn.preprocessing import normalize            norm2 = normalize(raw.values[:,np.newaxis], axis=0).ravel()                        result = torch.tensor(norm2).unsqueeze(dim=1)        return result    def onehot_matrix(self, vec, domain):        def onehot(value):            result = torch.zeros(len(domain))            result[domain.index(value)] = 1.            return result        onehots = [onehot(value) for value in vec]        return torch.stack(onehots)def easy_data():    data = torch.randn(10000,4)    for i in range(len(data)):        if data[i][1] * data[i][2] > 0:            data[i][3] = 1        else:            data[i][3] = 0        data[i][0] = 1.    df = pd.DataFrame(data.numpy(), columns = ['X0', 'X1', 'X2', 'Y'])    df = df.astype({"Y": int})    return df